<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
						   http://www.springframework.org/schema/tx/spring-tx.xsd">
<!--  
xml 파일
IOC 컨테이너에 적재될 bean 객체 생성과 injection (DI)

1. 필용한 controller 생성하고 bean 객체 생성 , injection
2. 현재 >> 하나의 클래스가 method 단위로 요청을 처리하는 것은 조금 뒤에 ...
   현재 controller 하나당 요청 하나를 처리 ....
   결과 : 하나의 클래스가 method 단위로 요청을 처리
   
 controller 요청당 한개
   요청 :   게시판 목록보기 (행위 업무)
              게시판 글쓰기
              게시판 글 수정하기
          
  localhost:8090/website/customer/notice.htm
  
  context:component-scan 엘리먼트 사용시
  [클래스 상단]에
  @Component  : 최상위
  @Repository : DAO
  @Service    : 업무 
  @Controller : 요청 처리
  @RestController  :  비동기 요청
  [ 클래스는 자동으로 빈객체 생성 ] ....
  
 @Repository
 class NewMemberDao {}
  아래 코드처럼 빈객를 생성할 필요 없다
 <context:component-scan base-package="dao" />  
  
  <bean   class="dao.NewNoticeDao"   />   코드를 사용할 필요 없다   why) 자동 빈 생성   >> component-scan
-->	

<context:annotation-config />
<context:component-scan base-package="ncontroller"  />
<context:component-scan base-package="dao"  />
<context:component-scan base-package="service"/>

<!-- root-context 에 dataSource ref -->
<!-- child는 root ref 가능, child와 child는 ref 불가 -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="driverManagerDataSource" />
	<!-- child와 child간에는 안돼요
		servlet이 자식/root가 부모
		자식이 부모꺼를 쓸수 있고
		부모가 자식꺼 쓸수 없고 -->
</bean>

<!-- 
	Spring 트랜잭션의 단위가 method 기반
	
	@Trnasactional  //이렇게 어노테이션을 걸수 있는거임
	public void method(){
	}
 -->
 <!-- @Transactional 동작되기 위해서는 선행 -->
 <tx:annotation-driven transaction-manager="transactionManager"/>
 <!-- driven이 어노테이션이 걸린것을 transactionManager가 관리해준다고 함 -->
</beans> 


