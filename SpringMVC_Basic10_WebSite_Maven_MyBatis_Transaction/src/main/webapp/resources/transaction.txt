FrontController -> mapping -> CustomerController (함수단위 매핑) -함수 (모든 로직 ...DAO ,DTO ...)
IndexController
JoinController
CustomerController -> Service -> DB(DAO) 작업 -> Service -> CustomerController -> VIEW단 (View : Model) 

***** 하나의 서비스가 여러개의 업무를 처리 해야 ...
***** 기존 방식은 트랜잭션 처리 어려움 ... 최소 하나 이상의 없무


1.은행 입출금 업무
2.회원이 게시판 글을 쓰면 포인트를 증가하는 비지니스

begin
	insert board
	update member point 증가 
end
end까지 오지못하면 rollback

commit, rollback

1. Service 단 추가 : DB작업 분리 (Mybatis)
2. Controller 수정 하기 : Service 객체가 필요 >> sqlsession(x) 

----------------------------------------------------

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

<bean id="driverManagerDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
	<property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"></property>
	<property name="username" value="springuser"></property>
	<property name="password" value="1004"></property>
</bean>

<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	<property name="dataSource" ref="driverManagerDataSource" />
</bean>

<!-- 공통빈 --> 
<bean id="multipartResolver" 
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
	<property name="maxUploadSize" value="10485760"/>
</bean>

<!-- Transaction 만들기 -->

<bean id="transactionManager" 
	class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="driverManagerDataSource" /> 
</bean>

<!-- 정말정말 중요한 코드↓-->
<tx:annotation-driven transaction-manager="transactionManager"/> 
<!--//@Transactional이붙어있는 코드에 대해서 트랜잭션을 처리하겠다는 의미의 코드↑-->
//@Transactional
</beans>

​

트랜잭션 처리하기
	xmlns:tx="http://www.springframework.org/schema/tx"
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd"

<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<beans:property name="dataSource" ref="dataSource" />
</bean>

<tx:annotation-driven transaction-manager="transactionManager" />
--------------------------------------------------------------------------- 

테이블 변경
alter table member
add point number;

alter table member 
add constraint ck_member_hit check(point < 3);

DAO

update member
set point = nvl(point,0) + 1
where userid = 'kglim'; 

->NoticeDao 인터페이스 함수 추가
->NoticeDao.xml 에 update 구문 추가
->CustomerService TEST ...

->CustomerService
->CustomerController 변경작업

​membertable에 check에 체크제약을 걸거임 
point 가 3보다 작지 못하게
kglim이라는 사람이 글을썼다는 가정하에
포인트를 올리는 쿼리
이쿼리가 실패했을때 게시판에 글이 안써지는가 확인하려고함
(쿼리실패? 3보다 작을때만 성공이니까)

-insert board		10번글
-update point	>>	1

-insert board		11번글
-update point	>>	2

-insert board		12번글
-update point	>>	3 이면 체크제약에 걸리겠지  >> 그럼 실패 >> 그럼 12번글도 rollback이 되서 처리되지 않는걸 원하는거임