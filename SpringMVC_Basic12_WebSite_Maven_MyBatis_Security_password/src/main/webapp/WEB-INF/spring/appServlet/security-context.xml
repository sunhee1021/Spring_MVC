<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:security="http://www.springframework.org/schema/security"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
                                     http://www.springframework.org/schema/beans/spring-beans.xsd
                                    http://www.springframework.org/schema/security 
                                    http://www.springframework.org/schema/security/spring-security.xsd">

<!--  
1단계
인증과 권한 처리 (in-memory) 방식으로 사용자 만들고 권한 설정  TEST

-> 3.x.x >> access = "ROLE_USER"
->4.x.x >>  access = hasRole()

인증 권한 (로그인 페이지 , 로그인 처리) 직접 구현 >> Spring 에서는 코딩 없이 자동화 가능
auto-config="true" >> login 관련된 모든 처리를 자동화 옵션
disabled="true"  >> csrf  token 자동 생성 억제 코드

1단계 기본 코드

		<security:http  auto-config="true">
			<security:csrf   disabled="true" />
			<security:intercept-url pattern="/customer/noticeDetail.htm"   access="hasRole('ROLE_USER')"/>
			<security:intercept-url pattern="/customer/noticeReg.htm"      access="hasRole('ROLE_ADMIN')" />
		</security:http>
		<security:authentication-manager>
				<security:authentication-provider>
						<security:user-service>
								<security:user name="hong"    password="1004"  authorities="ROLE_USER"/>
								<security:user name="admin"  password="1004"  authorities="ROLE_ADMIN,ROLE_USER"/>
						</security:user-service>
				</security:authentication-provider>					
		</security:authentication-manager>
		-->
		<!-- 
			<form name='f' action='/SpringMVC_Basic09/login' method='POST'>
            >>   /login  요청  (인증처리)   >> Spring 내부적으로 구현된 Controller에 특정 method  동작
            >>   /login?error  요청 실패			
			>>  자동화 전제 
			>> <input type='text' name='username' value=''>   ,   <input type='password' name='password'/>
			>>  /login >> 요청 >> Controller 특정 함수 동작 >> id , pwd 받아서 >> 검증 확인(authentication-provider) >> in-memory
			>>  인증 되었다면 >> session 생성 
			>> /login?error
			>> 로그아웃 :   /logout  >> 자동 세션 소멸 처리 ....
			
		 -->
		 
		<!--   2단계 코드 
		 login 페이지 처리
	
	>>form-login 속성 정의하기
	login-page : login form 페이지 URL
	username-parameter : form id의 name 속성값 (email >> id)
	password-parameter : form pw의 name 속성값
	login-processing-url : form action 값 (security를 이용해 인증처리)
	default-target-url : 로그인 성공 시 이동 URL
	authentication-failure-url : 로그인 실패 시 이동 URL
	always-use-default-target : true 로 하면 무조건 default-target-url 로 이동한다.
	false 로 하면 authentication-success-handler 대로 redirect 된다.
	authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력
	만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋겠다.
	res.sendRedirect 등으로 처리
	authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력
	
	>> security:logout
	logout-url : 로그아웃 처리할 URL (security가 알아서 만들기 때문에, 이 경로로 요청만 하면된다)
	logout-success-url : 로그아웃 성공 시 이동 URL
	success-handler-ref : 로그아웃 성공 시 프로세스 정의, bean id 입력
	invalidate-session : 로그아웃 시 세션 삭제여부
	
	>>session-management
	invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
	max-sessions : 최대 허용 가능한 세션 수
	expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
	error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)
	
	아래 처리 한다고 해서 
	login 처리 직접 하는 것은 아니다
	
	**
	/login 요청 처리는 여전이 spring 위임하고 있다 .....
	기본적인 요청 주소 , parametre 값은 정해진 되로
		  -->
		  
		<!-- 
		2단계
		 <security:http  auto-config="true">
			<security:csrf   disabled="true" />
			<security:form-login   login-page="/joinus/login.htm"    
			                                       authentication-failure-url="/joinus/login.htm?error"  />
			 <security:logout   logout-success-url="/index.htm" />                                      
			<security:intercept-url pattern="/customer/noticeDetail.htm"   access="hasRole('ROLE_USER')"/>
			<security:intercept-url pattern="/customer/noticeReg.htm"      access="hasRole('ROLE_ADMIN')" />
		</security:http>
		<security:authentication-manager>
				<security:authentication-provider>
						<security:user-service>
								<security:user name="hong"    password="1004"  authorities="ROLE_USER"/>
								<security:user name="admin"  password="1004"  authorities="ROLE_ADMIN,ROLE_USER"/>
						</security:user-service>
				</security:authentication-provider>					
		</security:authentication-manager> 
		
		        <access-denied-handler error-page="/login/accessDenied.do" />
		        구현하면 권한 403시 보여지는 페이지 구현
		-->
		 <security:http  auto-config="true">
			<security:csrf   disabled="true" />
			<security:form-login  
			                                       default-target-url="/index.htm"   
												   login-page="/joinus/login.htm"    
			                                       authentication-failure-url="/joinus/login.htm?error"  />
			                                       
			 <security:logout   logout-success-url="/index.htm" /> 
			                                      
			<security:intercept-url pattern="/customer/*Reg.htm"   access="hasRole('ROLE_USER')"/>
			<security:intercept-url pattern="/admin/**"      access="hasRole('ROLE_ADMIN')" />
			
			<security:access-denied-handler error-page="/joinus/accessDenied.htm" />
		</security:http>
		<security:authentication-manager>
				<security:authentication-provider>
						<security:jdbc-user-service data-source-ref="driverManagerDataSource" 
						 users-by-username-query="select userid , pwd as password , 1 enabled from member where userid=?"
						 authorities-by-username-query="select m.userid, r.role_name
																					from member m join roll r
																					on m.userid = r.userid
																					where m.userid=?"
						  />
						  <security:password-encoder ref="bCryptPasswordEncoder"/>
				</security:authentication-provider>					
		</security:authentication-manager> 
</beans>

